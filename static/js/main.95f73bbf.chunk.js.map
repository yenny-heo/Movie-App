{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","props","src","poster","alt","title","className","MovieGenre","genre","Movie","this","genres","map","index","key","text","synopsis","maxLine","ellipsis","trimRight","basedOn","React","Component","App","state","_renderMovies","movies","movie","title_english","medium_cover_image","id","_getMovies","a","_callAPI","setState","fetch","then","response","json","data","catch","err","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0VAkCA,SAASA,EAAYC,GACjB,OACI,yBAAKC,IAAKD,EAAME,OAAQC,IAAKH,EAAMG,IAAKC,MAAOJ,EAAMG,IAAKE,UAAU,iBAG5E,SAASC,EAAWN,GAChB,OACI,0BAAMK,UAAU,eAAeL,EAAMO,MAArC,KAkBOC,M,iLAnDP,OACI,yBAAKH,UAAU,SACX,yBAAKA,UAAU,iBACX,kBAACN,EAAD,CAAaG,OAAUO,KAAKT,MAAME,OAAQC,IAAKM,KAAKT,MAAMI,SAE9D,yBAAKC,UAAU,iBACX,4BAAKI,KAAKT,MAAMI,OAChB,yBAAKC,UAAU,gBACVI,KAAKT,MAAMU,OAAOC,IAAI,SAACJ,EAAOK,GAAR,OAAkB,kBAACN,EAAD,CAAYC,MAASA,EAAOM,IAAOD,OAEhF,yBAAKP,UAAU,kBACX,kBAAC,IAAD,CACAS,KAAML,KAAKT,MAAMe,SACjBC,QAAQ,IACRC,SAAS,OACTC,WAAS,EACTC,QAAQ,mB,GAlBZC,IAAMC,WC+CXC,E,2MA7CbC,MAAQ,G,EASRC,cAAgB,WASd,OARe,EAAKD,MAAME,OAAOd,IAAI,SAAAe,GACnC,OAAO,kBAAC,EAAD,CACPtB,MAASsB,EAAMC,cACfzB,OAAUwB,EAAME,mBAChBf,IAAOa,EAAMG,GACbnB,OAAUgB,EAAMhB,OAChBK,SAAYW,EAAMX,c,EAKtBe,W,qBAAa,4BAAAC,EAAA,qEACU,EAAKC,WADf,OACLP,EADK,OAEX,EAAKQ,SAAS,CACZR,WAHS,yC,EAObO,SAAW,WACT,OAAOE,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKb,SACvBc,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,M,mFA3B1B/B,KAAKqB,e,+BAgCL,OACE,yBAAKzB,UAAYI,KAAKc,MAAME,OAAS,MAAO,eACzChB,KAAKc,MAAME,OAAShB,KAAKe,gBAAkB,e,GAzClCJ,IAAMC,WCMJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.95f73bbf.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport LineEllipsis from 'react-lines-ellipsis';\nimport './Movie.css';\n\n\nclass Movie extends React.Component{\n    render(){\n        return(\n            <div className=\"Movie\">\n                <div className=\"Movie_Columns\">\n                    <MoviePoster poster = {this.props.poster} alt={this.props.title} />\n                </div>\n                <div className=\"Movie_Columns\">\n                    <h1>{this.props.title}</h1>\n                    <div className=\"Movie_Genres\">\n                        {this.props.genres.map((genre, index) => <MovieGenre genre = {genre} key = {index}/>)}\n                    </div>\n                    <div className=\"Movie_Synopsis\">\n                        <LineEllipsis\n                        text={this.props.synopsis}\n                        maxLine='3'\n                        ellipsis=' ...'\n                        trimRight\n                        basedOn='letters'\n                        />\n                    </div>\n                </div>\n            </div>\n            \n        )\n    }\n}\n\nfunction MoviePoster(props){\n    return(\n        <img src={props.poster} alt={props.alt} title={props.alt} className=\"Movie_Poster\"/>\n    )\n}\nfunction MovieGenre(props){\n    return(\n        <span className=\"Movie_Genre\">{props.genre} </span>\n    )\n}\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes = {\n    poster: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired,\n}\n\nMovieGenre.propTypes = {\n    genre: PropTypes.string.isRequired,\n}\nexport default Movie;","import React from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n\n\nclass App extends React.Component{\n\n  state = {\n    \n  }\n\n  componentDidMount(){\n    this._getMovies();\n\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return <Movie \n      title = {movie.title_english} \n      poster = {movie.medium_cover_image} \n      key = {movie.id} \n      genres = {movie.genres}\n      synopsis = {movie.synopsis}/>\n    })\n    return movies;\n  }\n\n  _getMovies = async () =>{\n    const movies = await this._callAPI();\n    this.setState({\n      movies // movies: movies\n    })\n  }\n\n  _callAPI = () =>{\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json()) // json으로 변환\n    .then(json => json.data.movies)//리턴값\n    .catch(err => console.log(err))\n  }\n\n  render()\n  {\n    return (\n      <div className= {this.state.movies ? \"App\": \"App-loading\"}>\n        {this.state.movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';//UI 라이브러리\nimport ReactDOM from 'react-dom';//리액트를 웹사이트에 출력하도록 도와줌 (document object model )\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}